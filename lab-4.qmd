---
title: "Trust in Science and Medicine Analysis (2018)"
format: 
  dashboard:
    orientation: columns
    nav-buttons: [linkedin]
    linkedin: www.linkedin.com/in/alisa-krasilnikov
server: shiny
theme: Pulse
logo: images/CP_logo_alt_rev.svg
logo-alt: Green Cal Poly logo displaying learn by doing crest
---


```{r, echo=FALSE, message = FALSE}
#| context: setup
library(shiny)
library(shinydashboard)
library(readxl)
library(tidyverse)
library(ggrepel)
library(leaflet)
library(rnaturalearth)
library(plotly)
library(kableExtra)
library(bslib)
```

```{r, echo=FALSE}
#| label: read-datasets
#| context: setup

country_data <- read_excel(
  here::here("wgm2018-dataset-crosstabs-all-countries.xlsx"), 
                           sheet = "Full dataset")

country_data_dictionary <- read_excel(
  here::here("wgm2018-dataset-crosstabs-all-countries.xlsx"), 
                           sheet = "Data dictionary")

life <- read_excel(
  here::here("Life.xls"), 
  skip = 3,
  sheet = "Data")

```


```{r, echo=FALSE}
#| label: country-cleaning
#| context: setup

dictionary_firstrow <- head(country_data_dictionary, n = 1)

variable_codes_list <- as.list(str_split(dictionary_firstrow$`Variable Type & Codes*`, pattern = ","))

variable_codes_tibble <- tibble(Code = str_trim(variable_codes_list[[1]]))

coding <- variable_codes_tibble |> 
  filter(str_trim(Code) != "") |> 
  separate_wider_delim(Code, delim = "=", names_sep = "Country") |> 
  rename(WP5 = "CodeCountry1", Country = "CodeCountry2") |> 
  mutate(WP5 = as.numeric(WP5))
```

```{r, echo=FALSE}
#| label: region-cleaning
#| context: setup

dictionary_regrow <- slice(country_data_dictionary, 57)

variable_codes_list <- as.list(str_split(dictionary_regrow$`Variable Type & Codes*`, pattern = ","))

variable_codes_tibble <- tibble(Code = str_trim(variable_codes_list[[1]]))

region_coding <- variable_codes_tibble |> 
  filter(str_trim(Code) != "") |> 
  separate_wider_delim(Code, delim = "=", names_sep = "Country") |> 
  rename(Regions_Report = "CodeCountry1", Region = "CodeCountry2") |>
  mutate(Regions_Report = as.numeric(Regions_Report))
```

```{r, echo=FALSE}
#| label: merging
#| context: setup

cleaned_dataset <- merge(country_data, coding, by = "WP5")
cleaned_dataset <- merge(cleaned_dataset, region_coding, by = "Regions_Report") 

```


```{r, echo=FALSE}
#| label: new-dataset-cleaning
#| context: setup

final_dataset_2 <- cleaned_dataset |> 
  group_by(Country, Region) |> 
  summarize(
    total = n(),
    prop_low_trust = (sum(WGM_Indexr == 1, na.rm = TRUE) / total) * 100,
    prop_med_trust = (sum(WGM_Indexr == 2, na.rm = TRUE) / total) * 100,
    prop_high_trust = (sum(WGM_Indexr == 3, na.rm = TRUE) / total) * 100,
    prop_no_opinion = (sum(WGM_Indexr == 99, na.rm = TRUE) / total) * 100,
    avg_trust = mean(WGM_Index, na.rm = TRUE),
    .groups = "drop"
  )

```

```{r, echo=FALSE}
#| label: new-dataset-adding-countries
#| context: setup

final_dataset_2 <- final_dataset_2 |> 
  mutate(Country = case_when(
    Country == "United States" ~ "United States of America",
    Country == "Czech Republic" ~ "Czechia",
    Country == "Ivory Coast" ~ "CÃ´te d'Ivoire",
    Country == "Republic of Congo" ~ "Dem. Rep. Congo",
    TRUE ~ Country
  ))

world <- ne_countries(scale = "medium", returnclass = "sf")
map_data <- world |>
  left_join(final_dataset_2, by = c("name" = "Country")) |> 
  filter(name != "Antarctica") 
```

```{r, echo = FALSE}
#| label: new-regions
#| context: setup

map_data <- map_data |> 
   mutate(New_region = case_when(
    Region %in% c("Eastern Africa", "Central Africa", "North Africa", "Southern Africa", "Western Africa") ~ "Africa",
    Region %in% c("Central America and Mexico", "Northern America", "South America") ~ "Americas",
    Region %in% c("Central Asia", "East Asia", "Southeast Asia", "South Asia") ~ "Asia",
    Region %in% c("Middle East") ~ "Middle East",
    Region %in% c("Eastern Europe", "Northern Europe", "Southern Europe", "Western Europe") ~ "Europe",
    Region == "Aus/NZ" ~ "Oceania",
    is.na(Region) ~ "Other",
    TRUE ~ "Other"
  ))
```

# {.sidebar}

```{r}
checkboxGroupInput('region', 'Select Regions:',
                   choices = sort(unique(map_data$New_region)),
                   selected = sort(unique(map_data$New_region)))

br()

sliderInput('age_range', 'Select Expected Life Expectancy Range:', 
             min=50, max=100,
             value= c(50, 100), 
             step=5)

br()

sliderInput('science_index', 'Select Trust in Science Index Range:', 
             min=1, max=4,
             value= c(1, 4), 
             step=1)
```

# Plots

## Column - Trust in Science 

```{r}
leafletOutput("map", height = "300vh")
```


### Row - Trust in Science Display {height="70%"}

```{r, echo=FALSE}
#| label: 2nd-visual
#| title: "Map Display of Trust in Science"
#| context: server

filtered_countries <- reactive({
    map_data[map_data$New_region %in% input$region &
    (is.na(map_data$avg_trust) |
     (map_data$avg_trust >= input$science_index[1] &
      map_data$avg_trust <= input$science_index[2])),
  ]
})

output$map <- renderLeaflet({
  
  pal <- colorNumeric(
    palette = "magma",
    domain = c(1, 4),
    reverse = TRUE,
    na.color = "grey"
  )
 
  
  leaflet(data = filtered_countries()) |> 
    addTiles() |> 
    addPolygons(
      fillColor = ~pal(avg_trust),
      color = "white",
      weight = 0.5,
      fillOpacity = 0.8,
      popup = ~paste0(
        "<b>", name, "</b><br>",
        "High Trust: ", round(prop_high_trust, 2), "%<br>",
        "Medium Trust: ", round(prop_med_trust, 2), "%<br>",
        "Low Trust: ", round(prop_low_trust, 2), "%<br>",
        "No Opinion: ", round(prop_no_opinion, 2), "%<br>",
        "Avg Science Trust Index: ", round(avg_trust, 2)
      ),
      label = ~paste(name, "Average Trust in Science Index: ", round(avg_trust, 2))
    ) |> 
    addLegend(pal = pal, values = c(1, 4), title = "Average Trust in Science Index") |> 
    setView(lng = 0, lat = 50, zoom = 1.4)
})
```

### Row - What is the Trust in Science Index? {height="25%"}

::: {.card title="What is the Trust in Science Index?"}
This metric aggregates public responses to questions about trust in science and scientists. Individuals sampled within countries received a trust score between **1 (low trust)** and **4 (high trust)**. The colors on the map will indicate the **average** trust in science score for the country.
:::

## Column - Percentage of Medical Trust

```{r}
plotlyOutput("plot")
```


```{r, echo=FALSE}
#| label: third-dataset-cleaning
#| context: setup

final_dataset_3 <- cleaned_dataset |>
  group_by(Country, Region) |>
  summarize(
    n_trust_medic = sum(Q11E %in% c(1,2), na.rm = TRUE),
    prop_trust_medic = sum(Q11E %in% c(1,2), na.rm = TRUE)/ sum(!is.na(Q11E))
  )

```

```{r, echo=FALSE}
#| label: life-expectancy
#| context: setup

life <- life |> 
  select(`Country Name`, `2018`)


final_dataset_3 <- life |>
  left_join(final_dataset_3, by = c("Country Name" = "Country"))
```

```{r, echo = FALSE}
#| label: plotly-new-regions
#| context: setup

final_dataset_3 <- final_dataset_3 |> 
   mutate(New_region = case_when(
    Region %in% c("Eastern Africa", "Central Africa", "North Africa", "Southern Africa", "Western Africa") ~ "Africa",
    Region %in% c("Central America and Mexico", "Northern America", "South America") ~ "Americas",
    Region %in% c("Central Asia", "East Asia", "Southeast Asia", "South Asia") ~ "Asia",
    Region %in% c("Middle East") ~ "Middle East",
    Region %in% c("Eastern Europe", "Northern Europe", "Southern Europe", "Western Europe") ~ "Europe",
    Region == "Aus/NZ" ~ "Oceania",
    is.na(Region) ~ "Other",
    TRUE ~ "Other"
  ))
```

```{r, echo=FALSE}
#| label: third-visual
#| context: server

filtered_countries2 <- reactive({
  final_dataset_3[
    final_dataset_3$New_region %in% input$region &
    final_dataset_3$`2018` >= input$age_range[1] &
    final_dataset_3$`2018` <= input$age_range[2],
  ]
})

output$plot <- renderPlotly({ 
  plot <- plot_ly(
  data = filtered_countries2(),
  x = ~`2018`,
  y = ~prop_trust_medic,
  type = 'scatter',
  mode = 'markers',
  text = ~paste(
    "Country: ", `Country Name`, "<br>",
    "Percentage of Trust in Doctors and Nurses: ", round(prop_trust_medic * 100, 1), "%<br>",
    "Life Expectancy: ", round(`2018`, 0), "years"
  ),
  hoverinfo = 'text',
  marker = list(size = 10,
                color = '#8b008b')
)
  
  plot <- layout(
  plot,
  title = list(
    text = "Percentage of trust in medical professionals \nby life expectancy",
    font = list(size = 20),
    x = 0.07,
    xanchor = "left"
  ),
  margin = list(t = 100),
  xaxis = list(
    title = "Life Expectancy at Birth (2018)",
    dtick = 10
  ),
  yaxis = list(
    tickformat = ',.0%',
    title = ""
  )
)

plot
})
```

### Value Box {height="30%"}

```{r}
uiOutput("scienceBox")
```

```{r, echo = FALSE}
#| context: server

 overall_mean <- reactive({
   final_dataset_3[final_dataset_3$New_region %in% input$region, ] |>
     summarize(mean_trust = mean(prop_trust_medic, na.rm = TRUE) * 100) |>
     mutate(mean_trust = round(mean_trust, 0))
 })

 overall_science_mean <- reactive({
   map_data[map_data$New_region %in% input$region, ] |>
     summarize(mean_sci_trust = mean(avg_trust, na.rm = TRUE)) |>
     mutate(mean_sci_trust = round(mean_sci_trust, 2))
 })
```

```{r}
#| context: server

output$scienceBox <- renderUI({
  bslib::value_box(
    title = "Overall Average Science Trust Index",
    value = overall_science_mean()$mean_sci_trust,
    theme = "purple" 
  )
})
```

```{r}
uiOutput("medValueBox")
```

```{r}
#| context: server

output$medValueBox <-  renderUI({
  bslib::value_box(
    title = "Overall Average Medical Trust",
    value = paste(overall_mean()$mean_trust, "%"),
    theme = "pink" 
  )
 })
```
# Data

### Column {.tabset}

```{r}
#| title: Trust in Science
#| context: setup

final_dataset_2 |>
  mutate(
    "Percent High Trust" = round(prop_high_trust, 2),
    "Percent Medium Trust" = round(prop_med_trust, 2),
    "Percent Low Trust" = round(prop_low_trust, 2),
    "Percent No Opinion" = round(prop_no_opinion, 2),
    "Avg Science Trust Index" = round(avg_trust, 2)) |> 
  select(Country, 
         `Percent High Trust`, 
         `Percent Medium Trust`, 
         `Percent Low Trust`, 
         `Percent No Opinion`, 
         `Avg Science Trust Index`) |>
  kbl() |> 
  kable_material(c("striped", "hover")) |> 
  scroll_box()

```

```{r}
#| title: Trust in Medical Professionals (Doctors and Nurses)
#| context: setup

final_dataset_3 |>
  filter(!is.na(prop_trust_medic)) |> 
  mutate(
    "Proportion of Trust" = round(prop_trust_medic, 2),
    "Life Expectancy (2018)" = round(`2018`, 0)) |> 
  rename(Country = "Country Name") |> 
  select(Country,
         `Proportion of Trust`, 
         `Life Expectancy (2018)`) |> 
  kbl() |> 
  kable_material(c("striped", "hover")) |> 
  scroll_box()

```